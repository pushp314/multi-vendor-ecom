generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  VENDOR
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String?   // nullable for Google OAuth users
  googleId  String?   @unique
  role      Role      @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  vendor    Vendor?
  cart      Cart?
  orders    Order[]
  addresses Address[]
  reviews   Review[]
}

model Vendor {
  id          String     @id @default(cuid())
  userId      String     @unique
  storeName   String
  logo        String?
  description String?

  user        User       @relation(fields: [userId], references: [id])
  products    Product[]
  orders      OrderItem[]
  payouts     Payout[]
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  products  Product[]
}

model Product {
  id          String      @id @default(cuid())
  vendorId    String
  title       String
  description String
  price       Float
  stock       Int         @default(0)
  sizes       String[]    // ["S", "M", "L"]
  colors      String[]    // ["Red", "Blue"]
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
  inventory   InventoryLog[]
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())

  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  total             Float
  status            OrderStatus @default(PENDING)
  createdAt         DateTime    @default(now())
  stripeSessionId   String?     @unique
  shippingAddressId String?
  billingAddressId  String?

  user              User        @relation(fields: [userId], references: [id])
  items             OrderItem[]
  payment           Payment?
  shippingAddress   Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  coupons           Coupon[]
  payouts           Payout[]
}

model OrderItem {
  id        String      @id @default(cuid())
  orderId   String
  productId String
  vendorId  String
  quantity  Int
  price     Float
  status    OrderStatus @default(PENDING)

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  provider      String        // "razorpay"
  transactionId String?       // Razorpay payment ID
  createdAt     DateTime      @default(now())

  order         Order         @relation(fields: [orderId], references: [id])
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  line1      String
  line2      String?
  city       String
  state      String
  country    String
  postalCode String

  user       User     @relation(fields: [userId], references: [id])
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
}

model Payout {
  id        String   @id @default(cuid())
  vendorId  String
  orderId   String
  amount    Float
  status    String   // PENDING, PAID
  createdAt DateTime @default(now())

  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  title     String
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model InventoryLog {
  id        String   @id @default(cuid())
  productId String
  change    Int       // +10 restock, -2 order
  reason    String
  createdAt DateTime  @default(now())

  product   Product  @relation(fields: [productId], references: [id])
}

model Coupon {
  id        String   @id @default(cuid())
  code      String   @unique
  discount  Float    // percent or flat
  validFrom DateTime
  validTo   DateTime
  isActive  Boolean  @default(true)

  orders    Order[]
}
